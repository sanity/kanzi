package msmd.gui;
import msmd.*;
import msmd.diff.*;
import org.w3c.dom.*;
import org.w3c.tidy.*;
import java.util.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;

/**
 *  Description of the Class
 *
 * @author     ian
 * @created    October 8, 2002
 */
public class ApplyDiff extends WizardPage {
  Tidy t = new Tidy();

  JProgressBar docprogbar = new JProgressBar(),
      diffprogbar = new JProgressBar();
  Wizard w;
  boolean done = false;


  public ApplyDiff(Wizard w) {
    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
    this.w = w;
    add(Box.createVerticalGlue());
    add(new JLabel("Total Progress:"));
    add(docprogbar);
    add(new JLabel("Document Progress:"));
    add(diffprogbar);
    add(Box.createVerticalGlue());
  }


  public void entered() {
    System.err.println("Here we go...");
      new Thread() {
        public void run() {
          try {
            go((DraftFile) w.volatileProperties.get("orig-df"),
                (LinkedList) w.volatileProperties.get("targets"));
          } catch (IOException e) {
            e.printStackTrace();
          }
        }
      }.start();
  }


  public void go(DraftFile example, LinkedList targets) throws IOException {
    File oldF = example.getDraft();
    File newF = example.getFinal();
    Document a = HTMLReader.readPage(oldF);
    Document b = HTMLReader.readPage(newF);
    DOMDiff dd = new DOMDiff();
    LinkedList differences = dd.getDiff(a, b);
    for (Iterator i = differences.iterator(); i.hasNext(); ) {
      System.out.println("Difference: " + i.next());
    }
    int x = 0;
    for (Iterator i = targets.iterator(); i.hasNext(); ) {
      updateDocProgressBar(targets.size(), x);
      applyDifferences(a, differences, (DraftFile) i.next());
      x++;
    }
  }


  protected int docmax = -1, diffmax = -1;


  public void updateDiffProgressBar(int max, int current) {
    System.err.println("Diff[" + current + "/" + max + "]");
    if (this.diffmax == -1) {
      this.diffmax = max;
      diffprogbar.setMaximum(max);
      diffprogbar.setMinimum(0);
    }
    diffprogbar.setValue(current + 1);
  }


  public void updateDocProgressBar(int max, int current) {
    System.err.println("Doc[" + current + "/" + max + "]");
    if (this.docmax == -1) {
      this.docmax = max;
      docprogbar.setMaximum(max);
      docprogbar.setMinimum(0);
    }
    docprogbar.setValue(current + 1);
  }



  public void applyDifferences(Document samp, LinkedList d, DraftFile f)
       throws IOException {
    Document mod = HTMLReader.readPage(f.getFinal());
    Remapper rm = new Remapper(samp, mod);
    LinkedList newDiffs = new LinkedList();
    int progress = 0;
    int progressMax = d.size() * 2;
    for (Iterator i = d.iterator(); i.hasNext(); ) {
      updateDiffProgressBar(progressMax, progress);
      newDiffs.add(((Difference) i.next()).remap(rm));
      progress++;
    }
    for (Iterator i = newDiffs.iterator(); i.hasNext(); ) {
      updateDiffProgressBar(progressMax, progress);
      ((Difference) i.next()).apply();
      progress++;
    }
    // Mangle
    ProcessTxt.process(mod);

    t.pprint(mod, f.getFinalOut());
    done = true;
    w.refresh();
  }


  public boolean nextAllowed() {
    return done;
  }


  public String getTitle() {
    return "Step 3:  Applying changes...";
  }
}

