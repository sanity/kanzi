package msmd.gui;

import msmd.sysdep.*;
import javax.swing.*;
import java.awt.event.*;
import msmd.*;
import java.io.*;
import java.net.*;
import java.util.*;

public class Review extends WizardPage implements ActionListener {

    static final String message1=
        "<html><p>At this time, you should use the button below " +
        "to review the changes made to your documents.</p></html>",
        message2=
        "<html><p>If you are satisfied, you may complete the process "+
        "by clicking Finished.  If not, you <b><i>must</i></b> click "+
        "Undo Changes to restore the original documents.</p></html>";

    public String getTitle () {
        return "Step 4:  Review the Changes";
    }

    Wizard w;
    JButton review, undo, finished;

    public Review(Wizard w) {
        this.w=w;
        JLabel m1=new JLabel(message1);
        JLabel m2=new JLabel(message2);

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        add(Box.createVerticalGlue());
        JPanel pan=new JPanel();
        pan.setLayout(new BoxLayout(pan, BoxLayout.X_AXIS));
        pan.add(Box.createHorizontalStrut(50));
        pan.add(m1);
        pan.add(Box.createHorizontalStrut(50));
        add(pan);
        pan=new JPanel();
        pan.setLayout(new BoxLayout(pan, BoxLayout.X_AXIS));
        pan.add(Box.createHorizontalGlue());
        pan.add(review=new JButton("Review Your Documents"));
        pan.add(Box.createHorizontalStrut(50));
        add(pan);
        add(Box.createVerticalGlue());
        pan=new JPanel();
        pan.add(Box.createHorizontalStrut(50));
        pan.setLayout(new BoxLayout(pan, BoxLayout.X_AXIS));
        pan.add(Box.createHorizontalStrut(50));
        pan.add(m2);
        add(pan);
        
        pan=new JPanel();
        pan.setLayout(new BoxLayout(pan,BoxLayout.X_AXIS));
        pan.add(Box.createHorizontalGlue());
        pan.add(undo=new JButton("Undo Changes"));
        pan.add(Box.createHorizontalStrut(20));
        pan.add(finished=new JButton("Finished"));
        pan.add(Box.createHorizontalStrut(50));
        add(pan);
        add(Box.createVerticalGlue());

        undo.setActionCommand("undo");
        finished.setActionCommand("finished");
        review.setActionCommand("review");
        
        undo.addActionListener(this);
        finished.addActionListener(this);
        review.addActionListener(this);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("review")) {
            try {
                LaunchBrowser.launch(((DraftFile)w.volatileProperties.get("orig-df")).getFinal().toURL());
            } catch (MalformedURLException m) {
                m.printStackTrace();
            } catch (IOException ie) {
                ie.printStackTrace();
            }
        } else if (e.getActionCommand().equals("undo")) {
            try {
                ((DraftFile)w.volatileProperties.get("orig-df")).revert();
                LinkedList ls=(LinkedList)w.volatileProperties.get("targets");
                for (Iterator i=ls.iterator(); i.hasNext();) 
                    ((DraftFile)i.next()).revert();
            } catch (IOException ie) {
                ie.printStackTrace();
            }
        } else if (e.getActionCommand().equals("finished")) {
            try {
                undo.setEnabled(false);
                ((DraftFile)w.volatileProperties.get("orig-df")).commit();
                LinkedList ls=(LinkedList)w.volatileProperties.get("targets");
                for (Iterator i=ls.iterator(); i.hasNext();) 
                    ((DraftFile)i.next()).commit();
                DraftFile.revertAll();
                System.exit(0);
            } catch (IOException ie) {
                ie.printStackTrace();
            }
        }
    }

    public boolean nextAllowed() {
        return false;
    }

    public boolean lastAllowed() {
        return false;
    }
}
